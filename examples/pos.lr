// fn sum(n: int) -> {int | V >= 0}
fn f0(l0: int; _0: own(l0)) ret k0(l1: {int | V >= 0}; ;own(l1)) =
  letcont k1(l2: {int | _ }; _0: own(l2)) =
    jump k0(_0)
  in
  let _1 = alloc(1);
  _1 := _0 < 0;
  if _1 then
    _0 := 0 - _0;
    jump k1()
  else
    jump k1()

// fn length(p: (a: int, {int | V >= a})) -> {int | V >= 0}
fn f1(l0: (@0: int, @1: {int | V >= @0}); _0: own(l0))
    ret k0(l1: {int | V >= 0}; ; own(l1)) =
  let _1 = alloc(1);
  _1 := _0.1 - _0.0;
  jump k0(_1)

fn f2(l0: {int | V >= 0}; _0: own(l0)) ret k0(l1: {int | V >= l0}; ; own(l1)) =
  let _1 = alloc(1);
  let _2 = alloc(1);
  letcont k1( l0: {int | _ }, l1: {int | _ }, l2: {int | _ }
            ; _1: own(l0), _2: own(l1), _0: own(l2)
            ) =
    let _3 = alloc(1);
    _3 := _1 <= _0;
    if _3 then
      _2 := _2 + _1;
      _1 := _1 + 1;
      jump k1()
    else
      jump k0(_2)
  in
  _1 := 0;
  _2 := 0;
  jump k1()

// fn inc<'a>(n: &'a mut int) -> () / n: {int | V == old(*n) + 1}
fn f3<'0>( l0: int, l1: &'0 mut l0
         ; _0: own(l1)
         ) ret k0( l2: {int | V == l0 + 1}, l3: &'0 mut l2, l4: ()
                 ; _0: own(l3)
                 ; own(l4)
                 ) =
  *_0 := *_0 + 1;
  let _1 = alloc(1);
  _1 := ();
  jump k0(_1)

// fn inc2<'a>(n: &'a mut int) -> () / n: {int | V == old(*n) + 2}
fn f4<'0>( l0: int, l1: &'0 mut l0
           ; _0: own(l1)
           ) ret k0( l2: {int | V == l0 + 2}, l3: &'0 mut l2, l4: ()
                   ; _0: own(l3)
                   ; own(l4)
                   ) =
  let _1 = alloc(1);
  let _2 = alloc(1);

  letcont k1( l0: {int | _ }, l1: &'0 mut l0, l2: uninit(1), l3: uninit(1)
            ; _0: own(l1), _1: own(l2), _2: own(l3)
            ) =
    _1 := &mut *_0;
    call _2 := f3(_1) ret k2

  and k2( l0: {int | _ }, l1: &'0 mut l0, l2: uninit(1), l3: uninit(1)
        ; _0: own(l1), _1: own(l2), _2: own(l3)
        ) =
    _1 := &mut *_0;
    call _2 := f3(_1) ret k3

  and k3( l0: {int | _ }, l1: &'0 mut l0, l2: uninit(1), l3: ()
        ; _0: own(l1), _1: own(l2), _2: own(l3)
        ) =
    jump k0(_2)
  in
  jump k1()
