#![allow(clippy::all)]
#![allow(unused_parens)]
use std::str::FromStr;
use super::span_with_offset;
use crate::syntax::ast::*;
use rustc_span::{symbol::Symbol, hygiene::SyntaxContext, BytePos};

grammar<F>(offset: BytePos, ctxt: SyntaxContext, next_expr_id: F) where F: Fn () -> ExprId, F: Copy;

pub FnAnnot: FnType = {
    "/**@" <FnType> "@*/"
}

FnType: FnType = {
    "(" <inputs:ReftList> ")" "->" <output:Reft> =>
        FnType {
            inputs: inputs,
            output
        },
}

pub LocalAnnot: Reft = {
    "/**@" <Reft> "@*/"
}

ReftList: Vec<Reft> = {
    <refines:(<Reft> ",")*> <r:Reft?> => {
        let mut refines = refines;
        if let Some(r) = r {
            refines.push(r);
        }
        refines
    },
}

Reft: Reft = {
    <lo:@L> <ident: Ident> ":" "{" <e: ExprLevel1> "}" <hi:@R> =>
        Reft {
            binding: ident,
            pred: *e,
            span: span_with_offset(lo, hi, offset, ctxt),
            hir_res: HirRes::Unresolved
        },
}

ExprLevel1 = LeftAssoc<OpGroup1, ExprLevel2>;

ExprLevel2 = LeftAssoc<OpGroup2, ExprLevel3>;

ExprLevel3: Box<Pred> = {
    <lo:@L> <e1: ExprLevel4> <op: BinOp<OpGroup3>> <e2: ExprLevel4> <hi:@R> =>
        box Pred {
            expr_id: next_expr_id(),
            kind: ExprKind::Binary(e1, op, e2),
            span: span_with_offset(lo, hi, offset, ctxt),
        },
    ExprLevel4,
}

ExprLevel4 = LeftAssoc<OpGroup4, ExprLevel5>;

ExprLevel5 = LeftAssoc<OpGroup5, ExprLevel6>;

ExprLevel6: Box<Pred> = {
    <lo:@L> <op: UnOp> <e: ExprLevel7> <hi:@R> =>
        box Pred {
            expr_id: next_expr_id(),
            kind: ExprKind::Unary(op, e),
            span: span_with_offset(lo, hi, offset, ctxt)
        },
    ExprLevel7,
}

ExprLevel7: Box<Pred> = {
    <lo:@L> <name: Name> <hi:@R> =>
        box Pred {
            expr_id: next_expr_id(),
            kind: ExprKind::Name(name),
            span: span_with_offset(lo, hi, offset, ctxt)
        },
    <lo:@L> <lit: Lit> <hi:@R> =>
        box Pred {
            expr_id: next_expr_id(),
            kind: ExprKind::Lit(lit),
            span: span_with_offset(lo, hi, offset, ctxt)
        },
    "(" <ExprLevel1> ")",
}

OpGroup1: BinOpKind = {
    "||" => BinOpKind::Or,
}

OpGroup2: BinOpKind = {
    "&&" => BinOpKind::And,
}

OpGroup3: BinOpKind = {
    "<" => BinOpKind::Lt,
    "<=" => BinOpKind::Le,
    ">" => BinOpKind::Gt,
    ">=" => BinOpKind::Ge,
    "==" => BinOpKind::Eq,
}

OpGroup4: BinOpKind = {
    "+" => BinOpKind::Add,
    "-" => BinOpKind::Sub,
}

OpGroup5: BinOpKind = {
    "*" => BinOpKind::Mul,
    "/" => BinOpKind::Div,
}

UnOpKind: UnOpKind = {
    "!" => UnOpKind::Not,
    "*" => UnOpKind::Deref,
    "-" => UnOpKind::Neg,
}

Lit: Lit = {
  <lo:@L> <tok: r"[0-9]+"> <hi:@R> => {
      let kind = match u128::from_str(tok) {
          Ok(i) => LitKind::Int(i, LitIntType::Unsuffixed),
          Err(_) => LitKind::Err
      };
      Lit { kind: kind, span: span_with_offset(lo, hi, offset, ctxt) }
  },
  <lo:@L> <tok: r"[0-9]*\.[0-9]+"> <hi:@R> =>
      Lit {
          kind: LitKind::Float(Symbol::intern(tok), LitFloatType::Unsuffixed),
          span: span_with_offset(lo, hi, offset, ctxt)
      },
  <lo:@L> <tok: "true"> <hi:@R> =>
      Lit { kind: LitKind::Bool(true), span: span_with_offset(lo, hi, offset, ctxt) },
  <lo:@L> <tok: "false"> <hi:@R> =>
      Lit { kind: LitKind::Bool(false), span: span_with_offset(lo, hi, offset, ctxt) }
}

Name: Name = {
    <Ident> => Name {ident: <>, hir_res: HirRes::Unresolved }
}

Ident: Ident = {
    <lo:@L> <sym: r"[a-zA-Z][a-zA-Z0-9_]*"> <hi:@R> => Ident {
        name: Symbol::intern(sym),
        span: span_with_offset(lo, hi, offset, ctxt),
    }
}

LeftAssoc<OpGroup, NextExprLevel>: Box<Pred> = {
    <lo:@L>
    <e1: LeftAssoc<OpGroup,NextExprLevel>>
    <op: BinOp<OpGroup>>
    <e2: NextExprLevel>
    <hi:@R> =>
        box Pred {
            expr_id: next_expr_id(),
            kind: ExprKind::Binary(e1, op, e2),
            span: span_with_offset(lo, hi, offset, ctxt)
        },
    NextExprLevel,
};

UnOp: UnOp = {
    <lo:@L> <kind: UnOpKind> <hi:@R> =>
        UnOp {
            kind: kind,
            span: span_with_offset(lo, hi, offset, ctxt),
        }
}

BinOp<OpGroup>: BinOp = {
    <lo:@L> <kind: OpGroup> <hi:@R> =>
        BinOp {
            kind: kind,
            span: span_with_offset(lo, hi, offset, ctxt),
        }
}
