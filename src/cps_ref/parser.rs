// auto-generated: "lalrpop 0.19.1"
// sha256: 66c672c087663f91456ca3db8b938b6c2041b8277ccfa1f7a71f73b33b5963
use std::str::FromStr;
use crate::cps_ref::ast::*;
use rustc_span::Symbol;
use crate::cps_ref::context::LiquidRustCtxt;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Fn {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use std::str::FromStr;
    use crate::cps_ref::ast::*;
    use rustc_span::Symbol;
    use crate::cps_ref::context::LiquidRustCtxt;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub enum __Symbol<'input, 'lr>
     {
        Variant0(&'input str),
        Variant1(::std::vec::Vec<&'input str>),
        Variant2((Field, Ty<'lr>)),
        Variant3(::std::vec::Vec<(Field, Ty<'lr>)>),
        Variant4((Local, OwnRef)),
        Variant5(::std::vec::Vec<(Local, OwnRef)>),
        Variant6((Location, Ty<'lr>)),
        Variant7(::std::vec::Vec<(Location, Ty<'lr>)>),
        Variant8(Local),
        Variant9(::std::vec::Vec<Local>),
        Variant10(Place),
        Variant11(::std::vec::Vec<Place>),
        Variant12(TypeLayout),
        Variant13(::std::vec::Vec<TypeLayout>),
        Variant14(Vec<(Local, OwnRef)>),
        Variant15(BasicType),
        Variant16(BinOp),
        Variant17(::std::option::Option<(Field, Ty<'lr>)>),
        Variant18(::std::option::Option<(Local, OwnRef)>),
        Variant19(::std::option::Option<(Location, Ty<'lr>)>),
        Variant20(Vec<(Field, Ty<'lr>)>),
        Variant21(Vec<(Location, Ty<'lr>)>),
        Variant22(Vec<Local>),
        Variant23(Vec<Place>),
        Variant24(Vec<TypeLayout>),
        Variant25(Constant),
        Variant26(ConstantP),
        Variant27(ContDef<'lr>),
        Variant28(Field),
        Variant29(FnDef<'lr>),
        Variant30(Box<FnBody<'lr>>),
        Variant31(Pred<'lr>),
        Variant32(::std::option::Option<Local>),
        Variant33(Location),
        Variant34(Operand),
        Variant35(OwnRef),
        Variant36(Vec<Projection>),
        Variant37(::std::option::Option<Place>),
        Variant38((Local, Vec<Projection>)),
        Variant39(u32),
        Variant40(::std::vec::Vec<u32>),
        Variant41(Region),
        Variant42(Rvalue),
        Variant43(Statement),
        Variant44(Symbol),
        Variant45(Ty<'lr>),
        Variant46(::std::option::Option<TypeLayout>),
        Variant47(Var),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 4
        0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 5
        82, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0,
        // State 6
        0, 0, -64, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 7
        0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
        // State 11
        0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 14
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 67,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
        // State 17
        82, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 122, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 92, 125, 67,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 21
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 67,
        // State 22
        0, -115, -115, 0, -115, -115, -115, 133, 0, -115, -115, -115, -115, 0, -115, -115, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, -115, 0, 0, 0,
        // State 23
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 24
        0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 25
        0, 0, 0, 0, 136, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0,
        // State 26
        0, 0, 0, 0, -126, 0, -126, 0, 0, 0, 0, 138, 139, 0, 140, 141, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0,
        // State 27
        0, 0, 0, 0, -128, 0, -128, 145, 0, 0, 0, -128, -128, 0, -128, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 92, 125, 67,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 92, 125, 67,
        // State 33
        0, 0, 0, 0, -129, 0, -129, 145, 0, 0, 0, -129, -129, 0, -129, -129, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 37, 169, 0, 0, 0, 38, 0, 0, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 36
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 37
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 41
        46, 47, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 181, 67,
        // State 42
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 37, 169, 0, 0, 0, 38, 0, 0, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 44
        0, 0, 0, 0, 136, 0, 137, 0, 0, 0, -136, 138, 139, 0, 140, 141, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 46
        0, 24, 188, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 47
        0, 0, -70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 48
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 37, 169, 0, 0, 0, 38, 0, 0, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 49
        0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 50
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 37, 169, 0, 0, 0, 38, 0, 0, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 52
        0, 47, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 181, 67,
        // State 53
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 54
        0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 55
        0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 56
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 37, 169, 0, 0, 0, 38, 0, 0, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 57
        0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 60
        0, 61, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
        // State 61
        0, 61, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
        // State 62
        0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 63
        0, 24, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 37, 169, 0, 0, 0, 38, 0, 0, 39, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, -143, -143, 0, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, -143, 0, 0, -143,
        // State 67
        0, 0, 0, 0, 0, 74, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, -111, 0, -111, 0, -111, -111, -111, 0, 0, -111, -111, 0, -111, -111, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 75, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20,
        // State 75
        0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, -61, 0, 0, 86, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, -104, -104, 0, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, 0, 0, -104,
        // State 80
        0, 0, 0, 0, 0, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, -63, 0, 0, 96, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, -14, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14,
        // State 86
        0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, -57, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, -90, 0, -90, -90, -90, 0, 0, -90, -90, 0, -90, -90, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0,
        // State 95
        0, 0, -15, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15,
        // State 96
        0, 0, -51, 0, 0, -51, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, -59, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0,
        // State 101
        0, 0, -150, 0, 0, -150, 0, 0, 0, 0, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
        // State 105
        0, -123, -123, 0, -123, -123, -123, -123, 0, -123, -123, -123, -123, 0, -123, -123, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, -123, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0,
        // State 107
        0, -117, 0, 0, -117, -117, -117, 0, 0, -117, -117, -117, -117, 0, -117, -117, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, -117, 0, 0, 0,
        // State 108
        0, -122, -122, 0, -122, -122, -122, -122, 0, -122, -122, -122, -122, 0, -122, -122, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, -122, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0,
        // State 112
        0, 0, -48, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 113
        0, 0, -144, 0, 0, -144, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, -127, 0, -127, 0, 0, 0, 0, -127, -127, 0, -127, -127, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0,
        // State 115
        0, 0, 0, 0, -156, 0, -156, -156, 0, 0, 0, -156, -156, 0, -156, -156, -156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0,
        // State 116
        0, 0, 0, 0, -155, 0, -155, -155, 0, 0, 0, -155, -155, 0, -155, -155, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
        // State 118
        0, 0, 0, 0, -101, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0,
        // State 119
        0, 0, 0, 0, -103, 0, -103, 0, 0, 0, 0, -103, -103, 0, -103, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0,
        // State 120
        0, 0, 0, 0, -157, 0, -157, -157, 0, 0, 0, -157, -157, 0, -157, -157, -157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
        // State 122
        0, 0, 0, 0, -86, 0, -86, 0, 0, 0, 0, -86, -86, 0, -86, -86, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0,
        // State 123
        0, 0, 0, 0, -85, 0, -85, 0, 0, 0, 0, -85, -85, 0, -85, -85, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0,
        // State 124
        0, 0, 0, 0, -87, 0, -87, 0, 0, 0, 0, -87, -87, 0, -87, -87, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0,
        // State 125
        0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, -29, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, -29,
        // State 130
        0, -116, -116, 0, -116, -116, -116, 151, 0, -116, -116, -116, -116, 0, -116, -116, -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, 0, 0, -116, 0, 0, 0,
        // State 131
        0, -120, -120, 0, -120, -120, -120, 0, 0, -120, -120, -120, -120, 0, -120, -120, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, -120, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
        // State 133
        0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, -121, -121, 0, -121, -121, -121, -121, 0, -121, -121, -121, -121, 0, -121, -121, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, -121, 0, 0, 0,
        // State 135
        0, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, -41, -41, -41,
        // State 136
        0, -42, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, -42, -42, -42,
        // State 137
        0, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, -43, -43, -43,
        // State 138
        0, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, -44, -44, -44,
        // State 139
        0, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, -45, -45, -45,
        // State 140
        0, -47, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, -47, -47, -47,
        // State 141
        0, -46, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, -46, -46, -46,
        // State 142
        0, 0, -145, 0, 0, -145, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, -133, 0, -133, -133, 0, 0, 0, -133, -133, 0, -133, -133, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
        // State 145
        0, 0, -146, 0, 0, -146, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, -114, 0, 0, -114, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, -147, 0, 0, -147, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, -30, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, -30,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
        // State 151
        0, -4, -4, 0, -4, -4, -4, -4, 0, -4, -4, -4, -4, 0, -4, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, -4, 0, 0, 0,
        // State 152
        0, -124, -124, 0, -124, -124, -124, -124, 0, -124, -124, -124, -124, 0, -124, -124, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, -124, 0, 0, 0,
        // State 153
        0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, -100, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0,
        // State 156
        0, 0, 0, 0, -102, 0, -102, 0, 0, 0, 0, -102, -102, 0, -102, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0,
        // State 157
        0, 0, 0, 0, -134, 0, -134, -134, 0, 0, 0, -134, -134, 0, -134, -134, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0,
        // State 158
        0, 0, 0, 0, -130, 0, -130, -130, 0, 0, 0, -130, -130, 0, -130, -130, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0,
        // State 159
        0, -5, -5, 0, -5, -5, -5, -5, 0, -5, -5, -5, -5, 0, -5, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, -5, 0, 0, 0,
        // State 160
        0, 0, -149, 0, 0, -149, 0, 0, 0, 0, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        0, 0, -148, 0, 0, -148, 0, 0, 0, 0, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 174
        0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 175
        0, 0, 0, 0, -112, 0, -112, 0, 0, 0, -112, -112, -112, 0, -112, -112, -112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 176
        0, 0, 0, 0, -113, 0, -113, 0, 0, 0, -113, -113, -113, 0, -113, -113, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, -82, 0, -82, 0, 0, 0, -82, -82, -82, 0, -82, -82, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, -81, 0, -81, 0, 0, 0, -81, -81, -81, 0, -81, -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, -83, 0, -83, 0, 0, 0, -83, -83, -83, 0, -83, -83, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 184
        0, -39, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, -39, -39,
        // State 185
        0, -40, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, -40, -40,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 187
        0, 0, 0, 0, -84, 0, -84, 0, 0, 0, -84, -84, -84, 0, -84, -84, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 188
        0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 189
        0, 0, -69, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 192
        0, 0, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 194
        0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 196
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 197
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 199
        0, 0, -71, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 201
        0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24,
        // State 202
        0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108,
        // State 203
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 204
        0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25,
        // State 205
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 206
        0, 0, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 207
        0, 0, -151, 0, 0, -151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 208
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 210
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 211
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 212
        0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 213
        0, 0, -77, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 214
        0, 0, -79, 0, 0, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 215
        0, 0, -152, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 216
        0, -34, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0,
        // State 217
        0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 218
        0, -35, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0,
        // State 219
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 220
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 45 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        -158,
        // State 65
        0,
        // State 66
        -143,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        -91,
        // State 165
        0,
        // State 166
        0,
        // State 167
        -98,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        -97,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        -95,
        // State 194
        0,
        // State 195
        -92,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        -96,
        // State 204
        0,
        // State 205
        -93,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        -94,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 130,
            5 => 11,
            8 => 6,
            11 => 3,
            14 => 54,
            17 => 21,
            20 => 61,
            21 => match state {
                62 => 217,
                _ => 75,
            },
            22 => 92,
            23 => 52,
            24 => match state {
                44 => 184,
                _ => 31,
            },
            25 => match state {
                44 => 185,
                _ => 32,
            },
            26 => match state {
                11 => 99,
                _ => 88,
            },
            28 => match state {
                6 => 83,
                _ => 76,
            },
            30 => match state {
                3 => 72,
                _ => 67,
            },
            32 => 89,
            33 => match state {
                58 => 208,
                _ => 77,
            },
            34 => 68,
            35 => 188,
            36 => 104,
            37 => 212,
            38 => 175,
            39 => 114,
            40 => 173,
            41 => 209,
            42 => match state {
                18 | 31..=32 => 115,
                _ => 90,
            },
            43 => 64,
            44 => match state {
                42 => 181,
                48 => 191,
                50 => 195,
                56 => 205,
                63 => 220,
                _ => 164,
            },
            45 => match state {
                28 => 146,
                51 => 196,
                _ => 69,
            },
            46 => 25,
            47 => 26,
            48 => match state {
                4 | 6 | 58 | 62 => 78,
                39 => 172,
                43 => 182,
                47 => 189,
                49 => 192,
                54 => 199,
                55 => 202,
                _ => 105,
            },
            50 => 55,
            52 => match state {
                12 => 102,
                18 | 31..=32 => 116,
                19 => 125,
                20 => 126,
                29 => 153,
                30 => 154,
                _ => 70,
            },
            53 => match state {
                52 => 197,
                _ => 44,
            },
            54 => match state {
                34 => 162,
                _ => 96,
            },
            55 => 131,
            56 => match state {
                14 => 106,
                21 => 127,
                36 => 169,
                37 => 170,
                41 | 52 => 176,
                45 => 186,
                53 => 198,
                _ => 165,
            },
            58 => match state {
                23 | 46 => 133,
                _ => 107,
            },
            59 => 22,
            60 => match state {
                24 => 134,
                _ => 108,
            },
            61 => 117,
            62 => match state {
                31 => 155,
                _ => 118,
            },
            63 => match state {
                32 => 156,
                _ => 119,
            },
            64 => match state {
                33 => 157,
                _ => 143,
            },
            66 => 33,
            67 => match state {
                15 => 109,
                16 => 110,
                _ => 98,
            },
            68 => 177,
            69 => 166,
            70 => match state {
                1 => 65,
                2..=3 | 12 | 18..=20 | 28..=32 | 51 => 71,
                13 => 103,
                38 => 171,
                40 => 174,
                59 => 210,
                _ => 79,
            },
            71 => match state {
                17 => 112,
                _ => 80,
            },
            72 => match state {
                60 => 213,
                61 => 214,
                _ => 206,
            },
            74 => 27,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###"".""###,
            r###"":""###,
            r###"":=""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""V""###,
            r###""_""###,
            r###""abort""###,
            r###""alloc""###,
            r###""bool""###,
            r###""call""###,
            r###""drop""###,
            r###""else""###,
            r###""false""###,
            r###""fn""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""jump""###,
            r###""let""###,
            r###""letcont""###,
            r###""mut""###,
            r###""own""###,
            r###""ret""###,
            r###""shared""###,
            r###""then""###,
            r###""true""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"@[a-zA-Z][a-zA-Z0-9_]*"#"###,
            r###"r#"[0-9]+"#"###,
            r###"r#"[a-z][a-zA-Z0-9_]*"#"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'input, 'lr, '__2>
    where 'lr: 'lr
    {
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &'__2 mut u32,
        input: &'input str,
        __phantom: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    }
    impl<'input, 'lr, '__2> __state_machine::ParserDefinition for __StateMachine<'input, 'lr, '__2>
    where 'lr: 'lr
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input, 'lr>;
        type Success = FnDef<'lr>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 45 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<(&(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.cx,
                self.holes,
                self.input,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<(&(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
        'lr,
    >(
        __token: &Token<'input>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(3, _) if true => Some(0),
            Token(4, _) if true => Some(1),
            Token(5, _) if true => Some(2),
            Token(6, _) if true => Some(3),
            Token(7, _) if true => Some(4),
            Token(8, _) if true => Some(5),
            Token(9, _) if true => Some(6),
            Token(10, _) if true => Some(7),
            Token(11, _) if true => Some(8),
            Token(12, _) if true => Some(9),
            Token(13, _) if true => Some(10),
            Token(14, _) if true => Some(11),
            Token(15, _) if true => Some(12),
            Token(16, _) if true => Some(13),
            Token(17, _) if true => Some(14),
            Token(18, _) if true => Some(15),
            Token(19, _) if true => Some(16),
            Token(20, _) if true => Some(17),
            Token(21, _) if true => Some(18),
            Token(22, _) if true => Some(19),
            Token(23, _) if true => Some(20),
            Token(24, _) if true => Some(21),
            Token(25, _) if true => Some(22),
            Token(26, _) if true => Some(23),
            Token(27, _) if true => Some(24),
            Token(28, _) if true => Some(25),
            Token(29, _) if true => Some(26),
            Token(30, _) if true => Some(27),
            Token(31, _) if true => Some(28),
            Token(32, _) if true => Some(29),
            Token(33, _) if true => Some(30),
            Token(34, _) if true => Some(31),
            Token(35, _) if true => Some(32),
            Token(36, _) if true => Some(33),
            Token(37, _) if true => Some(34),
            Token(38, _) if true => Some(35),
            Token(39, _) if true => Some(36),
            Token(40, _) if true => Some(37),
            Token(41, _) if true => Some(38),
            Token(42, _) if true => Some(39),
            Token(43, _) if true => Some(40),
            Token(44, _) if true => Some(41),
            Token(0, _) if true => Some(42),
            Token(1, _) if true => Some(43),
            Token(2, _) if true => Some(44),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'lr,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> __Symbol<'input, 'lr>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 => match __token {
                Token(3, __tok0) | Token(4, __tok0) | Token(5, __tok0) | Token(6, __tok0) | Token(7, __tok0) | Token(8, __tok0) | Token(9, __tok0) | Token(10, __tok0) | Token(11, __tok0) | Token(12, __tok0) | Token(13, __tok0) | Token(14, __tok0) | Token(15, __tok0) | Token(16, __tok0) | Token(17, __tok0) | Token(18, __tok0) | Token(19, __tok0) | Token(20, __tok0) | Token(21, __tok0) | Token(22, __tok0) | Token(23, __tok0) | Token(24, __tok0) | Token(25, __tok0) | Token(26, __tok0) | Token(27, __tok0) | Token(28, __tok0) | Token(29, __tok0) | Token(30, __tok0) | Token(31, __tok0) | Token(32, __tok0) | Token(33, __tok0) | Token(34, __tok0) | Token(35, __tok0) | Token(36, __tok0) | Token(37, __tok0) | Token(38, __tok0) | Token(39, __tok0) | Token(40, __tok0) | Token(41, __tok0) | Token(42, __tok0) | Token(43, __tok0) | Token(44, __tok0) | Token(0, __tok0) | Token(1, __tok0) | Token(2, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct FnParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl FnParser {
        pub fn new() -> FnParser {
            let __builder = super::__intern_token::new_builder();
            FnParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'lr,
        >(
            &self,
            cx: &'lr LiquidRustCtxt<'lr>,
            holes: &mut u32,
            input: &'input str,
        ) -> Result<FnDef<'lr>, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    cx,
                    holes,
                    input,
                    __phantom: ::std::marker::PhantomData::<(&(), &())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> Option<Result<FnDef<'lr>,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            1 => {
                __reduce1(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            2 => {
                __reduce2(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            3 => {
                __reduce3(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            4 => {
                __reduce4(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            5 => {
                __reduce5(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            6 => {
                __reduce6(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            7 => {
                __reduce7(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            8 => {
                __reduce8(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            9 => {
                __reduce9(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            10 => {
                __reduce10(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            11 => {
                __reduce11(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            12 => {
                __reduce12(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            13 => {
                __reduce13(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            14 => {
                __reduce14(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            15 => {
                __reduce15(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            16 => {
                __reduce16(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            17 => {
                __reduce17(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            18 => {
                __reduce18(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            19 => {
                __reduce19(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            20 => {
                __reduce20(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            21 => {
                __reduce21(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            22 => {
                __reduce22(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            23 => {
                __reduce23(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            24 => {
                __reduce24(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            25 => {
                __reduce25(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            26 => {
                __reduce26(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            27 => {
                __reduce27(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            28 => {
                __reduce28(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            29 => {
                __reduce29(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            30 => {
                __reduce30(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            31 => {
                __reduce31(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            32 => {
                __reduce32(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            33 => {
                __reduce33(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            34 => {
                __reduce34(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            35 => {
                __reduce35(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            36 => {
                __reduce36(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            37 => {
                __reduce37(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            38 => {
                __reduce38(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            39 => {
                __reduce39(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            40 => {
                __reduce40(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            41 => {
                __reduce41(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            42 => {
                __reduce42(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            43 => {
                __reduce43(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            44 => {
                __reduce44(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            45 => {
                __reduce45(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            46 => {
                __reduce46(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            47 => {
                __reduce47(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            48 => {
                __reduce48(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            49 => {
                __reduce49(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            50 => {
                __reduce50(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            51 => {
                __reduce51(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            52 => {
                __reduce52(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            53 => {
                __reduce53(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            54 => {
                __reduce54(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            55 => {
                __reduce55(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            56 => {
                __reduce56(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            57 => {
                __reduce57(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            58 => {
                __reduce58(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            59 => {
                __reduce59(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            60 => {
                __reduce60(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            61 => {
                __reduce61(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            62 => {
                __reduce62(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            63 => {
                __reduce63(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            64 => {
                __reduce64(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            65 => {
                __reduce65(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            66 => {
                __reduce66(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            67 => {
                __reduce67(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            68 => {
                __reduce68(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            69 => {
                __reduce69(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            70 => {
                __reduce70(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            71 => {
                __reduce71(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            72 => {
                __reduce72(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            73 => {
                __reduce73(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            74 => {
                __reduce74(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            75 => {
                __reduce75(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            76 => {
                __reduce76(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            77 => {
                __reduce77(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            78 => {
                __reduce78(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            79 => {
                __reduce79(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            80 => {
                __reduce80(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            81 => {
                __reduce81(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            82 => {
                __reduce82(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            83 => {
                __reduce83(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            84 => {
                __reduce84(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            85 => {
                __reduce85(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            86 => {
                __reduce86(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            87 => {
                __reduce87(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            88 => {
                __reduce88(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            89 => {
                __reduce89(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            90 => {
                __reduce90(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            91 => {
                __reduce91(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            92 => {
                __reduce92(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            93 => {
                __reduce93(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            94 => {
                __reduce94(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            95 => {
                __reduce95(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            96 => {
                __reduce96(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            97 => {
                __reduce97(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            98 => {
                __reduce98(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            99 => {
                __reduce99(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            100 => {
                __reduce100(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            101 => {
                __reduce101(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            102 => {
                __reduce102(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            103 => {
                __reduce103(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            104 => {
                __reduce104(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            105 => {
                __reduce105(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            106 => {
                __reduce106(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            107 => {
                __reduce107(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            108 => {
                __reduce108(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            109 => {
                __reduce109(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            110 => {
                __reduce110(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            111 => {
                __reduce111(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            112 => {
                __reduce112(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            113 => {
                __reduce113(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            114 => {
                __reduce114(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            115 => {
                __reduce115(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            116 => {
                __reduce116(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            117 => {
                __reduce117(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            118 => {
                __reduce118(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            119 => {
                __reduce119(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            120 => {
                __reduce120(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            121 => {
                __reduce121(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            122 => {
                __reduce122(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            123 => {
                __reduce123(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            124 => {
                __reduce124(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            125 => {
                __reduce125(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            126 => {
                __reduce126(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            127 => {
                __reduce127(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            128 => {
                __reduce128(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            129 => {
                __reduce129(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            130 => {
                __reduce130(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            131 => {
                __reduce131(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            132 => {
                __reduce132(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            133 => {
                __reduce133(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            134 => {
                __reduce134(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            135 => {
                __reduce135(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            136 => {
                __reduce136(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            137 => {
                __reduce137(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            138 => {
                __reduce138(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            139 => {
                __reduce139(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            140 => {
                __reduce140(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            141 => {
                __reduce141(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            142 => {
                __reduce142(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            143 => {
                __reduce143(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            144 => {
                __reduce144(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            145 => {
                __reduce145(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            146 => {
                __reduce146(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            147 => {
                __reduce147(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            148 => {
                __reduce148(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            149 => {
                __reduce149(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            150 => {
                __reduce150(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            151 => {
                __reduce151(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            152 => {
                __reduce152(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            153 => {
                __reduce153(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            154 => {
                __reduce154(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            155 => {
                __reduce155(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            156 => {
                __reduce156(cx, holes, input, __lookahead_start, __symbols, ::std::marker::PhantomData::<(&(), &())>)
            }
            157 => {
                // __Fn = Fn => ActionFn(0);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(cx, holes, input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant2<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, (Field, Ty<'lr>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, (Local, OwnRef), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, (Local, Vec<Projection>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, (Location, Ty<'lr>), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, BasicType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, BinOp, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Box<FnBody<'lr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Constant, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ConstantP, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ContDef<'lr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Field, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, FnDef<'lr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Local, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Location, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Operand, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, OwnRef, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Place, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Pred<'lr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Region, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Rvalue, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Statement, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Symbol, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Ty<'lr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, TypeLayout, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Var, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<(Field, Ty<'lr>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<(Local, OwnRef)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<(Location, Ty<'lr>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<Local>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<Place>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<Projection>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, Vec<TypeLayout>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, u32, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::option::Option<(Field, Ty<'lr>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::option::Option<(Local, OwnRef)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::option::Option<(Location, Ty<'lr>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::option::Option<Local>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::option::Option<Place>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::option::Option<TypeLayout>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<(Local, OwnRef)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<Local>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<Place>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<TypeLayout>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<u32>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, ::std::vec::Vec<&'input str>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
      'lr,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ("." <r#"[0-9]+"#>) = ".", r#"[0-9]+"# => ActionFn(84);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action84::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ("." <r#"[0-9]+"#>)* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ("." <r#"[0-9]+"#>)* = ("." <r#"[0-9]+"#>)+ => ActionFn(83);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ("." <r#"[0-9]+"#>)+ = ".", r#"[0-9]+"# => ActionFn(137);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action137::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ("." <r#"[0-9]+"#>)+ = ("." <r#"[0-9]+"#>)+, ".", r#"[0-9]+"# => ActionFn(138);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action138::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Field, Ty>> ",") = Binding<Field, Ty>, "," => ActionFn(107);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action107::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Field, Ty>> ",")* =  => ActionFn(105);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action105::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Field, Ty>> ",")* = (<Binding<Field, Ty>> ",")+ => ActionFn(106);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Field, Ty>> ",")+ = Binding<Field, Ty>, "," => ActionFn(141);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action141::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Field, Ty>> ",")+ = (<Binding<Field, Ty>> ",")+, Binding<Field, Ty>, "," => ActionFn(142);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action142::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 5)
    }
    pub(crate) fn __reduce10<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Local, OwnRef>> ",") = Binding<Local, OwnRef>, "," => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Local, OwnRef>> ",")* =  => ActionFn(117);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action117::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Local, OwnRef>> ",")* = (<Binding<Local, OwnRef>> ",")+ => ActionFn(118);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Local, OwnRef>> ",")+ = Binding<Local, OwnRef>, "," => ActionFn(145);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action145::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Local, OwnRef>> ",")+ = (<Binding<Local, OwnRef>> ",")+, Binding<Local, OwnRef>, "," => ActionFn(146);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action146::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce15<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Location, Ty>> ",") = Binding<Location, Ty>, "," => ActionFn(124);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action124::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce16<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Location, Ty>> ",")* =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action122::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce17<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Location, Ty>> ",")* = (<Binding<Location, Ty>> ",")+ => ActionFn(123);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action123::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce18<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Location, Ty>> ",")+ = Binding<Location, Ty>, "," => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce19<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Binding<Location, Ty>> ",")+ = (<Binding<Location, Ty>> ",")+, Binding<Location, Ty>, "," => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 11)
    }
    pub(crate) fn __reduce20<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Local> ",") = Local, "," => ActionFn(93);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action93::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce21<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Local> ",")* =  => ActionFn(91);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action91::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Local> ",")* = (<Local> ",")+ => ActionFn(92);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce23<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Local> ",")+ = Local, "," => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Local> ",")+ = (<Local> ",")+, Local, "," => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 14)
    }
    pub(crate) fn __reduce25<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Place> ",") = Place, "," => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce26<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Place> ",")* =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action110::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce27<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Place> ",")* = (<Place> ",")+ => ActionFn(111);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce28<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Place> ",")+ = Place, "," => ActionFn(157);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action157::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<Place> ",")+ = (<Place> ",")+, Place, "," => ActionFn(158);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action158::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce30<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<TypeLayout> ",") = TypeLayout, "," => ActionFn(100);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action100::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce31<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<TypeLayout> ",")* =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action98::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce32<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<TypeLayout> ",")* = (<TypeLayout> ",")+ => ActionFn(99);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action99::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce33<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<TypeLayout> ",")+ = TypeLayout, "," => ActionFn(161);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action161::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce34<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // (<TypeLayout> ",")+ = (<TypeLayout> ",")+, TypeLayout, "," => ActionFn(162);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action162::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce35<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Args = Comma<Binding<Local, OwnRef>> => ActionFn(53);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce36<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BasicType = "int" => ActionFn(25);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce37<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BasicType = "bool" => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce38<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOp = BinOpGroup1 => ActionFn(67);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce39<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOp = BinOpGroup2 => ActionFn(68);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce40<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup1 = "+" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce41<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup1 = "-" => ActionFn(61);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup2 = "<" => ActionFn(62);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup2 = "<=" => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup2 = "==" => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce45<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup2 = ">=" => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce46<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // BinOpGroup2 = ">" => ActionFn(66);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce47<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Field, Ty> = Field, ":", Ty => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant45(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 26)
    }
    pub(crate) fn __reduce48<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Field, Ty>? = Binding<Field, Ty> => ActionFn(103);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action103::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce49<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Field, Ty>? =  => ActionFn(104);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce50<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Local, OwnRef> = Local, ":", OwnRef => ActionFn(72);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant35(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action72::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce51<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Local, OwnRef>? = Binding<Local, OwnRef> => ActionFn(115);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce52<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Local, OwnRef>? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action116::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce53<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Location, Ty> = Location, ":", Ty => ActionFn(70);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant45(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant33(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action70::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 30)
    }
    pub(crate) fn __reduce54<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Location, Ty>? = Binding<Location, Ty> => ActionFn(120);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce55<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Binding<Location, Ty>? =  => ActionFn(121);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action121::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 31)
    }
    pub(crate) fn __reduce56<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Field, Ty>> = Binding<Field, Ty> => ActionFn(165);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action165::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce57<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Field, Ty>> =  => ActionFn(166);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action166::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce58<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Field, Ty>> = (<Binding<Field, Ty>> ",")+, Binding<Field, Ty> => ActionFn(167);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action167::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce59<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Field, Ty>> = (<Binding<Field, Ty>> ",")+ => ActionFn(168);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action168::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce60<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Local, OwnRef>> = Binding<Local, OwnRef> => ActionFn(169);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action169::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce61<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Local, OwnRef>> =  => ActionFn(170);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action170::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 33)
    }
    pub(crate) fn __reduce62<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Local, OwnRef>> = (<Binding<Local, OwnRef>> ",")+, Binding<Local, OwnRef> => ActionFn(171);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action171::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 33)
    }
    pub(crate) fn __reduce63<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Local, OwnRef>> = (<Binding<Local, OwnRef>> ",")+ => ActionFn(172);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action172::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce64<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Location, Ty>> = Binding<Location, Ty> => ActionFn(173);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action173::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce65<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Location, Ty>> =  => ActionFn(174);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action174::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce66<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Location, Ty>> = (<Binding<Location, Ty>> ",")+, Binding<Location, Ty> => ActionFn(175);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action175::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 34)
    }
    pub(crate) fn __reduce67<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Binding<Location, Ty>> = (<Binding<Location, Ty>> ",")+ => ActionFn(176);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action176::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce68<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Local> = Local => ActionFn(179);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action179::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce69<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Local> =  => ActionFn(180);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action180::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce70<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Local> = (<Local> ",")+, Local => ActionFn(181);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action181::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce71<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Local> = (<Local> ",")+ => ActionFn(182);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action182::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce72<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Place> = Place => ActionFn(183);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action183::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce73<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Place> =  => ActionFn(184);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action184::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce74<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Place> = (<Place> ",")+, Place => ActionFn(185);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action185::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce75<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<Place> = (<Place> ",")+ => ActionFn(186);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action186::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce76<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<TypeLayout> = TypeLayout => ActionFn(189);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action189::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce77<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<TypeLayout> =  => ActionFn(190);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action190::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 37)
    }
    pub(crate) fn __reduce78<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<TypeLayout> = (<TypeLayout> ",")+, TypeLayout => ActionFn(191);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action191::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce79<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Comma<TypeLayout> = (<TypeLayout> ",")+ => ActionFn(192);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action192::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce80<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Constant = "true" => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce81<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Constant = "false" => ActionFn(19);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce82<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Constant = r#"[0-9]+"# => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce83<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Constant = "(", ")" => ActionFn(21);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action21::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (2, 38)
    }
    pub(crate) fn __reduce84<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ConstantP = "true" => ActionFn(22);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce85<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ConstantP = "false" => ActionFn(23);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce86<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ConstantP = r#"[0-9]+"# => ActionFn(24);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce87<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // ContDef = Symbol, "(", Heap, ";", Env, ";", Args, ")", "=", FnBody => ActionFn(8);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant30(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant14(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant14(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action8::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (10, 40)
    }
    pub(crate) fn __reduce88<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Env = Comma<Binding<Local, OwnRef>> => ActionFn(54);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce89<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Field = r#"@[a-zA-Z][a-zA-Z0-9_]*"# => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce90<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Fn = "fn", Symbol, "(", Heap, ";", Args, ")", "ret", Symbol, "(", Heap, ";", OwnRef, ")", "=", FnBody => ActionFn(1);
        assert!(__symbols.len() >= 16);
        let __sym15 = __pop_Variant30(__symbols);
        let __sym14 = __pop_Variant0(__symbols);
        let __sym13 = __pop_Variant0(__symbols);
        let __sym12 = __pop_Variant35(__symbols);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant21(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant44(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant14(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant21(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant44(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym15.2.clone();
        let __nt = super::__action1::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11, __sym12, __sym13, __sym14, __sym15);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (16, 43)
    }
    pub(crate) fn __reduce91<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = "letcont", ContDef, "in", FnBody => ActionFn(2);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant30(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action2::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 44)
    }
    pub(crate) fn __reduce92<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = "if", Place, "then", FnBody, "else", FnBody => ActionFn(3);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant30(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action3::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (6, 44)
    }
    pub(crate) fn __reduce93<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = "call", Place, "(", Comma<Local>, ")", "ret", Symbol => ActionFn(4);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant44(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant22(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action4::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (7, 44)
    }
    pub(crate) fn __reduce94<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = "jump", Symbol, "(", ")" => ActionFn(177);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant44(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action177::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 44)
    }
    pub(crate) fn __reduce95<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = "jump", Symbol, "(", Local+, ")" => ActionFn(178);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant44(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action178::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 44)
    }
    pub(crate) fn __reduce96<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = Statement, ";", FnBody => ActionFn(6);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant43(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action6::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce97<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // FnBody = "abort" => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce98<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Heap = Comma<Binding<Location, Ty>> => ActionFn(55);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce99<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // LeftAssoc<BinOpGroup1, PredLevel2> = LeftAssoc<BinOpGroup1, PredLevel2>, BinOpGroup1, PredLevel2 => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 46)
    }
    pub(crate) fn __reduce100<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // LeftAssoc<BinOpGroup1, PredLevel2> = PredLevel2 => ActionFn(78);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce101<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // LeftAssoc<BinOpGroup2, PredLevel3> = LeftAssoc<BinOpGroup2, PredLevel3>, BinOpGroup2, PredLevel3 => ActionFn(75);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action75::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce102<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // LeftAssoc<BinOpGroup2, PredLevel3> = PredLevel3 => ActionFn(76);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce103<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local = Symbol => ActionFn(57);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce104<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 49)
    }
    pub(crate) fn __reduce105<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local* = Local+ => ActionFn(87);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce106<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local+ = Local => ActionFn(94);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce107<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local+ = Local+, Local => ActionFn(95);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action95::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 50)
    }
    pub(crate) fn __reduce108<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local? = Local => ActionFn(89);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce109<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Local? =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 51)
    }
    pub(crate) fn __reduce110<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Location = Symbol => ActionFn(58);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce111<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Operand = Constant => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce112<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Operand = Place => ActionFn(17);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce113<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // OwnRef = "own", "(", Location, ")" => ActionFn(45);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant33(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action45::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (4, 54)
    }
    pub(crate) fn __reduce114<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Path_ =  => ActionFn(139);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action139::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 55)
    }
    pub(crate) fn __reduce115<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Path_ = ("." <r#"[0-9]+"#>)+ => ActionFn(140);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action140::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce116<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Place = PlaceLevel1 => ActionFn(29);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce117<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Place? = Place => ActionFn(108);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce118<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Place? =  => ActionFn(109);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action109::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce119<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PlaceLevel1 = PlaceLevel2, Path_ => ActionFn(30);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant36(__symbols);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action30::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce120<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PlaceLevel2 = "*", PlaceLevel3 => ActionFn(31);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action31::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 59)
    }
    pub(crate) fn __reduce121<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PlaceLevel2 = PlaceLevel3 => ActionFn(32);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce122<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PlaceLevel3 = Local => ActionFn(33);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce123<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PlaceLevel3 = "(", PlaceLevel1, ")" => ActionFn(34);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant38(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action34::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (3, 60)
    }
    pub(crate) fn __reduce124<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PredLevel1 = LeftAssoc<BinOpGroup1, PredLevel2> => ActionFn(46);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce125<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PredLevel2 = LeftAssoc<BinOpGroup2, PredLevel3> => ActionFn(47);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce126<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PredLevel3 = ConstantP => ActionFn(48);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce127<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PredLevel3 = Var => ActionFn(187);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action187::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce128<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // PredLevel3 = Var, Projection+ => ActionFn(188);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action188::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce129<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Projection = ".", r#"[0-9]+"# => ActionFn(35);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action35::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (2, 64)
    }
    pub(crate) fn __reduce130<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Projection* =  => ActionFn(73);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action73::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (0, 65)
    }
    pub(crate) fn __reduce131<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Projection* = Projection+ => ActionFn(74);
        let __sym0 = __pop_Variant40(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce132<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Projection+ = Projection => ActionFn(113);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce133<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Projection+ = Projection+, Projection => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant39(__symbols);
        let __sym0 = __pop_Variant40(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce134<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Region = "{", Comma<Place>, "}" => ActionFn(44);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action44::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce135<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Rvalue = Operand => ActionFn(12);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce136<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Rvalue = Operand, BinOp, Operand => ActionFn(13);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant34(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action13::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce137<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Rvalue = "&", Place => ActionFn(14);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action14::<>(cx, holes, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (2, 68)
    }
    pub(crate) fn __reduce138<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Rvalue = "&", "mut", Place => ActionFn(15);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action15::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce139<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Statement = "let", Local, "=", "alloc", "(", TypeLayout, ")" => ActionFn(9);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action9::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (7, 69)
    }
    pub(crate) fn __reduce140<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Statement = Place, ":=", Rvalue => ActionFn(10);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant42(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action10::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce141<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Statement = "drop", "(", Local, ")" => ActionFn(11);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action11::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (4, 69)
    }
    pub(crate) fn __reduce142<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Symbol = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce143<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "own", "(", Location, ")" => ActionFn(37);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant33(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action37::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (4, 71)
    }
    pub(crate) fn __reduce144<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "{", BasicType, "|", PredLevel1, "}" => ActionFn(38);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant31(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action38::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (5, 71)
    }
    pub(crate) fn __reduce145<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "{", BasicType, "|", "_", "}" => ActionFn(39);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action39::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (5, 71)
    }
    pub(crate) fn __reduce146<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "&", "(", Region, ",", Location, ")" => ActionFn(40);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant33(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant41(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action40::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (6, 71)
    }
    pub(crate) fn __reduce147<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "&", "shared", "(", Region, ",", Location, ")" => ActionFn(41);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant33(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant41(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action41::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (7, 71)
    }
    pub(crate) fn __reduce148<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "&", "mut", "(", Region, ",", Location, ")" => ActionFn(42);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant33(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant41(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action42::<>(cx, holes, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (7, 71)
    }
    pub(crate) fn __reduce149<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Ty = "(", Comma<Binding<Field, Ty>>, ")" => ActionFn(43);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action43::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce150<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // TypeLayout = r#"[0-9]+"# => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 72)
    }
    pub(crate) fn __reduce151<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // TypeLayout = "(", Comma<TypeLayout>, ")" => ActionFn(28);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action28::<>(cx, holes, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce152<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // TypeLayout? = TypeLayout => ActionFn(96);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce153<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // TypeLayout? =  => ActionFn(97);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action97::<>(cx, holes, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 73)
    }
    pub(crate) fn __reduce154<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Var = Location => ActionFn(50);
        let __sym0 = __pop_Variant33(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce155<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Var = Field => ActionFn(51);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce156<
        'input,
        'lr,
    >(
        cx: &'lr LiquidRustCtxt<'lr>,
        holes: &mut u32,
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input, 'lr>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'lr ())>,
    ) -> (usize, usize)
    {
        // Var = "V" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(cx, holes, input, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 74)
    }
}
pub use self::__parse__Fn::FnParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use std::str::FromStr;
    use crate::cps_ref::ast::*;
    use rustc_span::Symbol;
    use crate::cps_ref::context::LiquidRustCtxt;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("^(@[A-Za-z][0-9A-Z_a-z]*)", false),
            ("^([0-9]+)", false),
            ("^([a-z][0-9A-Z_a-z]*)", false),
            ("^(\\&)", false),
            ("^(\\()", false),
            ("^(\\))", false),
            ("^(\\*)", false),
            ("^(\\+)", false),
            ("^(,)", false),
            ("^(\\-)", false),
            ("^(\\.)", false),
            ("^(:)", false),
            ("^(:=)", false),
            ("^(;)", false),
            ("^(<)", false),
            ("^(<=)", false),
            ("^(=)", false),
            ("^(==)", false),
            ("^(>)", false),
            ("^(>=)", false),
            ("^(V)", false),
            ("^(_)", false),
            ("^(abort)", false),
            ("^(alloc)", false),
            ("^(bool)", false),
            ("^(call)", false),
            ("^(drop)", false),
            ("^(else)", false),
            ("^(false)", false),
            ("^(fn)", false),
            ("^(if)", false),
            ("^(in)", false),
            ("^(int)", false),
            ("^(jump)", false),
            ("^(let)", false),
            ("^(letcont)", false),
            ("^(mut)", false),
            ("^(own)", false),
            ("^(ret)", false),
            ("^(shared)", false),
            ("^(then)", false),
            ("^(true)", false),
            ("^(\\{)", false),
            ("^(\\|)", false),
            ("^(\\})", false),
            ("^(//[\u{0}-\t\u{b}-\u{c}\u{e}-\u{10ffff}]*[\n\r]*)", true),
            ("^(/\\*([\u{0}-\\)\\+-\u{10ffff}]*\\*+[\u{0}-\\)\\+-\\.0-\u{10ffff}])*([\u{0}-\\)\\+-\u{10ffff}]*\\*+|[\u{0}-\\)\\+-\u{10ffff}])*\\*/)", true),
            ("^([\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}-\u{2029}\u{202f}\u{205f}\u{3000}]*)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
fn __action0<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, FnDef<'lr>, usize),
) -> FnDef<'lr>
{
    __0
}

#[allow(unused_variables)]
fn __action1<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, name, _): (usize, Symbol, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, heap, _): (usize, Vec<(Location, Ty<'lr>)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, args, _): (usize, Vec<(Local, OwnRef)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ret, _): (usize, Symbol, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, out_heap, _): (usize, Vec<(Location, Ty<'lr>)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, out_ty, _): (usize, OwnRef, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, body, _): (usize, Box<FnBody<'lr>>, usize),
) -> FnDef<'lr>
{
    FnDef { name:name, heap:heap, args:args, ret:ret, out_heap:out_heap, out_ty:out_ty, body:body }
}

#[allow(unused_variables)]
fn __action2<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, def, _): (usize, ContDef<'lr>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, rest, _): (usize, Box<FnBody<'lr>>, usize),
) -> Box<FnBody<'lr>>
{
    Box::new(FnBody::LetCont{ def:def, rest:rest })
}

#[allow(unused_variables)]
fn __action3<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, discr, _): (usize, Place, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, then, _): (usize, Box<FnBody<'lr>>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, else_, _): (usize, Box<FnBody<'lr>>, usize),
) -> Box<FnBody<'lr>>
{
    Box::new(FnBody::Ite{ discr:discr, then:then, else_:else_ })
}

#[allow(unused_variables)]
fn __action4<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, func, _): (usize, Place, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, args, _): (usize, Vec<Local>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, ret, _): (usize, Symbol, usize),
) -> Box<FnBody<'lr>>
{
    Box::new(FnBody::Call{ func:func, args:args, ret:ret })
}

#[allow(unused_variables)]
fn __action5<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, target, _): (usize, Symbol, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, args, _): (usize, ::std::vec::Vec<Local>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<FnBody<'lr>>
{
    Box::new(FnBody::Jump{ target:target, args:args })
}

#[allow(unused_variables)]
fn __action6<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Box<FnBody<'lr>>, usize),
) -> Box<FnBody<'lr>>
{
    Box::new(FnBody::Seq(__0, __1))
}

#[allow(unused_variables)]
fn __action7<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Box<FnBody<'lr>>
{
    Box::new(FnBody::Abort)
}

#[allow(unused_variables)]
fn __action8<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, name, _): (usize, Symbol, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, heap, _): (usize, Vec<(Location, Ty<'lr>)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, env, _): (usize, Vec<(Local, OwnRef)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, params, _): (usize, Vec<(Local, OwnRef)>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, body, _): (usize, Box<FnBody<'lr>>, usize),
) -> ContDef<'lr>
{
    ContDef { name:name, heap:heap, env:env, params:params, body:body }
}

#[allow(unused_variables)]
fn __action9<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Local, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, TypeLayout, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Statement
{
    Statement::Let(__0, __1)
}

#[allow(unused_variables)]
fn __action10<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Place, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Rvalue, usize),
) -> Statement
{
    Statement::Assign(__0, __1)
}

#[allow(unused_variables)]
fn __action11<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Local, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Statement
{
    Statement::Drop(__0)
}

#[allow(unused_variables)]
fn __action12<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Operand, usize),
) -> Rvalue
{
    Rvalue::Use(__0)
}

#[allow(unused_variables)]
fn __action13<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, lhs, _): (usize, Operand, usize),
    (_, op, _): (usize, BinOp, usize),
    (_, rhs, _): (usize, Operand, usize),
) -> Rvalue
{
    Rvalue::BinaryOp(op, lhs, rhs)
}

#[allow(unused_variables)]
fn __action14<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Place, usize),
) -> Rvalue
{
    Rvalue::Ref(BorrowKind::Shared, p)
}

#[allow(unused_variables)]
fn __action15<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Place, usize),
) -> Rvalue
{
    Rvalue::Ref(BorrowKind::Mut, p)
}

#[allow(unused_variables)]
fn __action16<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Constant, usize),
) -> Operand
{
    Operand::Constant(__0)
}

#[allow(unused_variables)]
fn __action17<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Place, usize),
) -> Operand
{
    Operand::Deref(__0)
}

#[allow(unused_variables)]
fn __action18<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Constant
{
    Constant::Bool(true)
}

#[allow(unused_variables)]
fn __action19<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Constant
{
    Constant::Bool(false)
}

#[allow(unused_variables)]
fn __action20<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Constant
{
    Constant::Int(u128::from_str(__0).unwrap())
}

#[allow(unused_variables)]
fn __action21<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> Constant
{
    Constant::Unit
}

#[allow(unused_variables)]
fn __action22<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ConstantP
{
    ConstantP::Bool(true)
}

#[allow(unused_variables)]
fn __action23<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ConstantP
{
    ConstantP::Bool(false)
}

#[allow(unused_variables)]
fn __action24<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ConstantP
{
    ConstantP::Int(u128::from_str(__0).unwrap())
}

#[allow(unused_variables)]
fn __action25<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BasicType
{
    BasicType::Int
}

#[allow(unused_variables)]
fn __action26<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BasicType
{
    BasicType::Bool
}

#[allow(unused_variables)]
fn __action27<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> TypeLayout
{
    TypeLayout::Block(u32::from_str(__0).unwrap())
}

#[allow(unused_variables)]
fn __action28<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<TypeLayout>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> TypeLayout
{
    TypeLayout::Tuple(__0)
}

#[allow(unused_variables)]
fn __action29<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, p, _): (usize, (Local, Vec<Projection>), usize),
) -> Place
{
    {
    let (local, projection) = p;
    Place { local, projection }
  }
}

#[allow(unused_variables)]
fn __action30<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, p, _): (usize, (Local, Vec<Projection>), usize),
    (_, path, _): (usize, Vec<Projection>, usize),
) -> (Local, Vec<Projection>)
{
    {
      let (local, mut proj) = p;
      proj.extend(path);
      (local, proj)
  }
}

#[allow(unused_variables)]
fn __action31<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, (Local, Vec<Projection>), usize),
) -> (Local, Vec<Projection>)
{
    {
    let (local, mut proj) = __0;
    proj.push(Projection::Deref);
    (local, proj)
  }
}

#[allow(unused_variables)]
fn __action32<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Local, Vec<Projection>), usize),
) -> (Local, Vec<Projection>)
{
    __0
}

#[allow(unused_variables)]
fn __action33<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Local, usize),
) -> (Local, Vec<Projection>)
{
    (__0, vec![])
}

#[allow(unused_variables)]
fn __action34<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, (Local, Vec<Projection>), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (Local, Vec<Projection>)
{
    __0
}

#[allow(unused_variables)]
fn __action35<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, &'input str, usize),
) -> u32
{
    u32::from_str(__0).unwrap()
}

#[allow(unused_variables)]
fn __action36<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, ::std::vec::Vec<&'input str>, usize),
) -> Vec<Projection>
{
    {
  __0.iter().map(|s| Projection::Field(u32::from_str(s).unwrap())).collect()
}
}

#[allow(unused_variables)]
fn __action37<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Location, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    cx.mk_ty(TyS::OwnRef(__0))
}

#[allow(unused_variables)]
fn __action38<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, ty, _): (usize, BasicType, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, pred, _): (usize, Pred<'lr>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    cx.mk_ty(TyS::Refine { ty:ty, pred:pred })
}

#[allow(unused_variables)]
fn __action39<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, ty, _): (usize, BasicType, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    {
    *holes += 1;
    cx.mk_ty(TyS::RefineHole {ty, n: *holes})
  }
}

#[allow(unused_variables)]
fn __action40<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Region, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Location, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    cx.mk_ty(TyS::Ref(BorrowKind::Shared, __0, __1))
}

#[allow(unused_variables)]
fn __action41<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Region, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Location, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    cx.mk_ty(TyS::Ref(BorrowKind::Shared, __0, __1))
}

#[allow(unused_variables)]
fn __action42<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Region, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Location, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    cx.mk_ty(TyS::Ref(BorrowKind::Mut, __0, __1))
}

#[allow(unused_variables)]
fn __action43<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<(Field, Ty<'lr>)>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Ty<'lr>
{
    cx.mk_ty(TyS::Tuple(__0))
}

#[allow(unused_variables)]
fn __action44<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Vec<Place>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Region
{
    Region::from(__0)
}

#[allow(unused_variables)]
fn __action45<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Location, usize),
    (_, _, _): (usize, &'input str, usize),
) -> OwnRef
{
    OwnRef(__0)
}

#[allow(unused_variables)]
fn __action46<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Pred<'lr>, usize),
) -> Pred<'lr>
{
    __0
}

#[allow(unused_variables)]
fn __action47<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Pred<'lr>, usize),
) -> Pred<'lr>
{
    __0
}

#[allow(unused_variables)]
fn __action48<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, ConstantP, usize),
) -> Pred<'lr>
{
    cx.mk_pred(PredS::Constant(__0))
}

#[allow(unused_variables)]
fn __action49<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, var, _): (usize, Var, usize),
    (_, projection, _): (usize, ::std::vec::Vec<u32>, usize),
) -> Pred<'lr>
{
    cx.mk_pred(PredS::Place { var:var, projection:projection })
}

#[allow(unused_variables)]
fn __action50<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Location, usize),
) -> Var
{
    Var::Location(__0)
}

#[allow(unused_variables)]
fn __action51<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Field, usize),
) -> Var
{
    Var::Field(__0)
}

#[allow(unused_variables)]
fn __action52<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Var
{
    Var::Nu
}

#[allow(unused_variables)]
fn __action53<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Vec<(Local, OwnRef)>, usize),
) -> Vec<(Local, OwnRef)>
{
    __0
}

#[allow(unused_variables)]
fn __action54<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Vec<(Local, OwnRef)>, usize),
) -> Vec<(Local, OwnRef)>
{
    __0
}

#[allow(unused_variables)]
fn __action55<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Vec<(Location, Ty<'lr>)>, usize),
) -> Vec<(Location, Ty<'lr>)>
{
    __0
}

#[allow(unused_variables)]
fn __action56<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Symbol
{
    Symbol::intern(__0)
}

#[allow(unused_variables)]
fn __action57<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Symbol, usize),
) -> Local
{
    Local(__0)
}

#[allow(unused_variables)]
fn __action58<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Symbol, usize),
) -> Location
{
    Location(__0)
}

#[allow(unused_variables)]
fn __action59<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Field
{
    Field::intern(&__0[1..])
}

#[allow(unused_variables)]
fn __action60<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Add
}

#[allow(unused_variables)]
fn __action61<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Sub
}

#[allow(unused_variables)]
fn __action62<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Lt
}

#[allow(unused_variables)]
fn __action63<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Le
}

#[allow(unused_variables)]
fn __action64<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Eq
}

#[allow(unused_variables)]
fn __action65<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Ge
}

#[allow(unused_variables)]
fn __action66<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> BinOp
{
    BinOp::Gt
}

#[allow(unused_variables)]
fn __action67<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, BinOp, usize),
) -> BinOp
{
    __0
}

#[allow(unused_variables)]
fn __action68<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, BinOp, usize),
) -> BinOp
{
    __0
}

#[allow(unused_variables)]
fn __action69<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
    (_, e, _): (usize, ::std::option::Option<(Location, Ty<'lr>)>, usize),
) -> Vec<(Location, Ty<'lr>)>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action70<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Location, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Ty<'lr>, usize),
) -> (Location, Ty<'lr>)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action71<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
    (_, e, _): (usize, ::std::option::Option<(Local, OwnRef)>, usize),
) -> Vec<(Local, OwnRef)>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action72<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Local, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, OwnRef, usize),
) -> (Local, OwnRef)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action73<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<u32>
{
    vec![]
}

#[allow(unused_variables)]
fn __action74<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<u32>, usize),
) -> ::std::vec::Vec<u32>
{
    v
}

#[allow(unused_variables)]
fn __action75<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, lhs, _): (usize, Pred<'lr>, usize),
    (_, op, _): (usize, BinOp, usize),
    (_, rhs, _): (usize, Pred<'lr>, usize),
) -> Pred<'lr>
{
    cx.mk_pred(PredS::BinaryOp(op, lhs, rhs))
}

#[allow(unused_variables)]
fn __action76<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Pred<'lr>, usize),
) -> Pred<'lr>
{
    __0
}

#[allow(unused_variables)]
fn __action77<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, lhs, _): (usize, Pred<'lr>, usize),
    (_, op, _): (usize, BinOp, usize),
    (_, rhs, _): (usize, Pred<'lr>, usize),
) -> Pred<'lr>
{
    cx.mk_pred(PredS::BinaryOp(op, lhs, rhs))
}

#[allow(unused_variables)]
fn __action78<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Pred<'lr>, usize),
) -> Pred<'lr>
{
    __0
}

#[allow(unused_variables)]
fn __action79<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Place>, usize),
    (_, e, _): (usize, ::std::option::Option<Place>, usize),
) -> Vec<Place>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action80<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
    (_, e, _): (usize, ::std::option::Option<(Field, Ty<'lr>)>, usize),
) -> Vec<(Field, Ty<'lr>)>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action81<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Field, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, __1, _): (usize, Ty<'lr>, usize),
) -> (Field, Ty<'lr>)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action82<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<&'input str>
{
    vec![]
}

#[allow(unused_variables)]
fn __action83<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<&'input str>, usize),
) -> ::std::vec::Vec<&'input str>
{
    v
}

#[allow(unused_variables)]
fn __action84<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, &'input str, usize),
) -> &'input str
{
    __0
}

#[allow(unused_variables)]
fn __action85<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<TypeLayout>, usize),
    (_, e, _): (usize, ::std::option::Option<TypeLayout>, usize),
) -> Vec<TypeLayout>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action86<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Local>
{
    vec![]
}

#[allow(unused_variables)]
fn __action87<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Local>, usize),
) -> ::std::vec::Vec<Local>
{
    v
}

#[allow(unused_variables)]
fn __action88<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Local>, usize),
    (_, e, _): (usize, ::std::option::Option<Local>, usize),
) -> Vec<Local>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action89<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Local, usize),
) -> ::std::option::Option<Local>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action90<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Local>
{
    None
}

#[allow(unused_variables)]
fn __action91<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Local>
{
    vec![]
}

#[allow(unused_variables)]
fn __action92<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Local>, usize),
) -> ::std::vec::Vec<Local>
{
    v
}

#[allow(unused_variables)]
fn __action93<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Local, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Local
{
    __0
}

#[allow(unused_variables)]
fn __action94<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Local, usize),
) -> ::std::vec::Vec<Local>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action95<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Local>, usize),
    (_, e, _): (usize, Local, usize),
) -> ::std::vec::Vec<Local>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action96<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, TypeLayout, usize),
) -> ::std::option::Option<TypeLayout>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action97<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<TypeLayout>
{
    None
}

#[allow(unused_variables)]
fn __action98<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<TypeLayout>
{
    vec![]
}

#[allow(unused_variables)]
fn __action99<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<TypeLayout>, usize),
) -> ::std::vec::Vec<TypeLayout>
{
    v
}

#[allow(unused_variables)]
fn __action100<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, TypeLayout, usize),
    (_, _, _): (usize, &'input str, usize),
) -> TypeLayout
{
    __0
}

#[allow(unused_variables)]
fn __action101<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ::std::vec::Vec<&'input str>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action102<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<&'input str>, usize),
    (_, e, _): (usize, &'input str, usize),
) -> ::std::vec::Vec<&'input str>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action103<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Field, Ty<'lr>), usize),
) -> ::std::option::Option<(Field, Ty<'lr>)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action104<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(Field, Ty<'lr>)>
{
    None
}

#[allow(unused_variables)]
fn __action105<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(Field, Ty<'lr>)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action106<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
) -> ::std::vec::Vec<(Field, Ty<'lr>)>
{
    v
}

#[allow(unused_variables)]
fn __action107<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Field, Ty<'lr>), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (Field, Ty<'lr>)
{
    __0
}

#[allow(unused_variables)]
fn __action108<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Place, usize),
) -> ::std::option::Option<Place>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action109<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Place>
{
    None
}

#[allow(unused_variables)]
fn __action110<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Place>
{
    vec![]
}

#[allow(unused_variables)]
fn __action111<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Place>, usize),
) -> ::std::vec::Vec<Place>
{
    v
}

#[allow(unused_variables)]
fn __action112<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Place, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Place
{
    __0
}

#[allow(unused_variables)]
fn __action113<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, u32, usize),
) -> ::std::vec::Vec<u32>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action114<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<u32>, usize),
    (_, e, _): (usize, u32, usize),
) -> ::std::vec::Vec<u32>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action115<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Local, OwnRef), usize),
) -> ::std::option::Option<(Local, OwnRef)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action116<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(Local, OwnRef)>
{
    None
}

#[allow(unused_variables)]
fn __action117<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(Local, OwnRef)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action118<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
) -> ::std::vec::Vec<(Local, OwnRef)>
{
    v
}

#[allow(unused_variables)]
fn __action119<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Local, OwnRef), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (Local, OwnRef)
{
    __0
}

#[allow(unused_variables)]
fn __action120<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Location, Ty<'lr>), usize),
) -> ::std::option::Option<(Location, Ty<'lr>)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action121<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<(Location, Ty<'lr>)>
{
    None
}

#[allow(unused_variables)]
fn __action122<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<(Location, Ty<'lr>)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action123<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
) -> ::std::vec::Vec<(Location, Ty<'lr>)>
{
    v
}

#[allow(unused_variables)]
fn __action124<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Location, Ty<'lr>), usize),
    (_, _, _): (usize, &'input str, usize),
) -> (Location, Ty<'lr>)
{
    __0
}

#[allow(unused_variables)]
fn __action125<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Location, Ty<'lr>), usize),
) -> ::std::vec::Vec<(Location, Ty<'lr>)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action126<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
    (_, e, _): (usize, (Location, Ty<'lr>), usize),
) -> ::std::vec::Vec<(Location, Ty<'lr>)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action127<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Local, OwnRef), usize),
) -> ::std::vec::Vec<(Local, OwnRef)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action128<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
    (_, e, _): (usize, (Local, OwnRef), usize),
) -> ::std::vec::Vec<(Local, OwnRef)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action129<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Place, usize),
) -> ::std::vec::Vec<Place>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action130<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Place>, usize),
    (_, e, _): (usize, Place, usize),
) -> ::std::vec::Vec<Place>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action131<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, (Field, Ty<'lr>), usize),
) -> ::std::vec::Vec<(Field, Ty<'lr>)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action132<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
    (_, e, _): (usize, (Field, Ty<'lr>), usize),
) -> ::std::vec::Vec<(Field, Ty<'lr>)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action133<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, TypeLayout, usize),
) -> ::std::vec::Vec<TypeLayout>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action134<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<TypeLayout>, usize),
    (_, e, _): (usize, TypeLayout, usize),
) -> ::std::vec::Vec<TypeLayout>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action135<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, __0, _): (usize, Local, usize),
) -> ::std::vec::Vec<Local>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action136<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Local>, usize),
    (_, e, _): (usize, Local, usize),
) -> ::std::vec::Vec<Local>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action137<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<&'input str>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action84(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action101(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action138<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<&'input str>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<&'input str>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action84(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action139<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Projection>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action82(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action36(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action140<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<&'input str>, usize),
) -> Vec<Projection>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action83(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action36(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action141<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, (Field, Ty<'lr>), usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<(Field, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action107(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action142<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
    __1: (usize, (Field, Ty<'lr>), usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<(Field, Ty<'lr>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action107(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action143<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::option::Option<(Field, Ty<'lr>)>, usize),
) -> Vec<(Field, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action105(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        cx,
        holes,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action144<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
    __1: (usize, ::std::option::Option<(Field, Ty<'lr>)>, usize),
) -> Vec<(Field, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action106(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        cx,
        holes,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action145<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, (Local, OwnRef), usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<(Local, OwnRef)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action119(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action146<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
    __1: (usize, (Local, OwnRef), usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<(Local, OwnRef)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action119(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action147<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::option::Option<(Local, OwnRef)>, usize),
) -> Vec<(Local, OwnRef)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action117(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        cx,
        holes,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action148<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
    __1: (usize, ::std::option::Option<(Local, OwnRef)>, usize),
) -> Vec<(Local, OwnRef)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action118(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        cx,
        holes,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action149<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, (Location, Ty<'lr>), usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<(Location, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action124(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action150<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
    __1: (usize, (Location, Ty<'lr>), usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<(Location, Ty<'lr>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action124(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action151<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::option::Option<(Location, Ty<'lr>)>, usize),
) -> Vec<(Location, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action122(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        cx,
        holes,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action152<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
    __1: (usize, ::std::option::Option<(Location, Ty<'lr>)>, usize),
) -> Vec<(Location, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action123(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        cx,
        holes,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action153<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, Local, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Local>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action93(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action154<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Local>, usize),
    __1: (usize, Local, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Local>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action93(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action155<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::option::Option<Local>, usize),
) -> Vec<Local>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action91(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        cx,
        holes,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action156<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Local>, usize),
    __1: (usize, ::std::option::Option<Local>, usize),
) -> Vec<Local>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action92(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        cx,
        holes,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action157<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, Place, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Place>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action112(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action158<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Place>, usize),
    __1: (usize, Place, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Place>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action112(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action159<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::option::Option<Place>, usize),
) -> Vec<Place>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action110(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        cx,
        holes,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action160<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Place>, usize),
    __1: (usize, ::std::option::Option<Place>, usize),
) -> Vec<Place>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action111(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        cx,
        holes,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action161<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, TypeLayout, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<TypeLayout>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action100(
        cx,
        holes,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action133(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action162<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<TypeLayout>, usize),
    __1: (usize, TypeLayout, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<TypeLayout>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action100(
        cx,
        holes,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action163<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::option::Option<TypeLayout>, usize),
) -> Vec<TypeLayout>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action98(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        cx,
        holes,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action164<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<TypeLayout>, usize),
    __1: (usize, ::std::option::Option<TypeLayout>, usize),
) -> Vec<TypeLayout>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action99(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        cx,
        holes,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action165<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, (Field, Ty<'lr>), usize),
) -> Vec<(Field, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action166<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<(Field, Ty<'lr>)>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action104(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action167<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
    __1: (usize, (Field, Ty<'lr>), usize),
) -> Vec<(Field, Ty<'lr>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action103(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action168<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Field, Ty<'lr>)>, usize),
) -> Vec<(Field, Ty<'lr>)>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action104(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action169<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, (Local, OwnRef), usize),
) -> Vec<(Local, OwnRef)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action115(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action170<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<(Local, OwnRef)>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action116(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action171<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
    __1: (usize, (Local, OwnRef), usize),
) -> Vec<(Local, OwnRef)>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action115(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action148(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action172<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Local, OwnRef)>, usize),
) -> Vec<(Local, OwnRef)>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action148(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action173<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, (Location, Ty<'lr>), usize),
) -> Vec<(Location, Ty<'lr>)>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action120(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action174<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<(Location, Ty<'lr>)>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action121(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action175<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
    __1: (usize, (Location, Ty<'lr>), usize),
) -> Vec<(Location, Ty<'lr>)>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action120(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action176<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<(Location, Ty<'lr>)>, usize),
) -> Vec<(Location, Ty<'lr>)>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action121(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action177<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Symbol, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, &'input str, usize),
) -> Box<FnBody<'lr>>
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action86(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        cx,
        holes,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action178<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Symbol, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, ::std::vec::Vec<Local>, usize),
    __4: (usize, &'input str, usize),
) -> Box<FnBody<'lr>>
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action87(
        cx,
        holes,
        input,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        cx,
        holes,
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action179<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, Local, usize),
) -> Vec<Local>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action89(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action180<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Local>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action90(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action181<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Local>, usize),
    __1: (usize, Local, usize),
) -> Vec<Local>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action89(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action182<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Local>, usize),
) -> Vec<Local>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action90(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action183<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, Place, usize),
) -> Vec<Place>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action108(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action159(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action184<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Place>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action109(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action159(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action185<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Place>, usize),
    __1: (usize, Place, usize),
) -> Vec<Place>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action108(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action186<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Place>, usize),
) -> Vec<Place>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action109(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action187<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, Var, usize),
) -> Pred<'lr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action73(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action188<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, Var, usize),
    __1: (usize, ::std::vec::Vec<u32>, usize),
) -> Pred<'lr>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action74(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action189<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, TypeLayout, usize),
) -> Vec<TypeLayout>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action96(
        cx,
        holes,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action190<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<TypeLayout>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action97(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        cx,
        holes,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action191<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<TypeLayout>, usize),
    __1: (usize, TypeLayout, usize),
) -> Vec<TypeLayout>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action96(
        cx,
        holes,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action192<
    'input,
    'lr,
>(
    cx: &'lr LiquidRustCtxt<'lr>,
    holes: &mut u32,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<TypeLayout>, usize),
) -> Vec<TypeLayout>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action97(
        cx,
        holes,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        cx,
        holes,
        input,
        __0,
        __temp0,
    )
}

pub trait __ToTriple<'input, 'lr, > {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>;
}

impl<'input, 'lr, > __ToTriple<'input, 'lr, > for (usize, Token<'input>, usize) {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, 'lr, > __ToTriple<'input, 'lr, > for Result<(usize, Token<'input>, usize), &'static str> {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
