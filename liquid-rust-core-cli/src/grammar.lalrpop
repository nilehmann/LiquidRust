use std::str::FromStr;
use liquid_rust_core::ast::*;
use liquid_rust_core::names::*;
use codespan::Span;
use std::iter::FromIterator;

grammar();

match {
    r"\s*" => {}, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { },                          // Skip `// comments`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // Skip `/* comments */`
    _,
}

pub Program: Program<Span> = <FnDef+> => {
    let mut program = Program::new();
    for (name, def) in <> {
        program.add_fn(name, def);
    }
    program
};

FnDef: (FnId, FnDef<Span>) = {
    "fn"
    <name: FnId>
    <regions: UniversalRegions?>
    "(" <in_heap: Heap> ";" <inputs: LocalsMap> ")"
    "ret" <ret: ContId> "(" <out_heap: Heap> ";" <outputs: LocalsMap> ";" <output: OwnRef> ")"
    "=" <body: FnBody> => {
        let mut params = vec![];
        for (local, _) in &inputs {
            params.push(*local);
        }
        let ty = FnDecl {
            regions: regions.unwrap_or_default(),
            in_heap,
            inputs,
            out_heap,
            outputs,
            output
        };
        (name, FnDef { name, params, body: *body, ty, ret })
    }
}

UniversalRegions: Vec<UniversalRegion> =
    "<" <Comma<UniversalRegion>> ">";

FnBody: Box<FnBody<Span>> = {
    "letcont" <defs: And<ContDef>> "in" <rest: FnBody> => Box::new(FnBody::LetCont(defs, rest)),

    "if" <discr: Place> "then" <then: FnBody> "else" <else_: FnBody>
        => Box::new(FnBody::Ite{ <> }),

    "call" <place: Place> ":=" <func: FnId> "(" <args: Comma<Local>> ")" "ret" <ret: ContId>
        => Box::new(FnBody::Call{ func, args, destination: Some((place, ret)) }),

    "jump" <target: ContId> "(" <args: Local*> ")" => Box::new(FnBody::Jump{ <> }),

    <Statement> ";" <FnBody> => Box::new(FnBody::Seq(<>)),

    "abort" => Box::new(FnBody::Abort)
}

ContDef: ContDef<Span> = {
    <name: ContId> "(" <heap: Heap> ";" <locals: LocalsMap> ")" "=" <body: FnBody>  => {
        let inputs = vec![];
        let params = vec![];
        let ty = ContTy { heap, locals, inputs };
        ContDef { name, params, ty, body }
    }
}

Statement: Statement<Span> = {
    <lo:@L> <kind: StatementKind> <hi:@R> =>
        Statement { kind, source_info: Span::new(lo as u32, hi as u32) }
}

StatementKind: StatementKind = {
    "let" <Local> "=" "alloc" "(" <TypeLayout> ")" => StatementKind::Let(<>),
    <Place> ":=" <Rvalue>                          => StatementKind::Assign(<>),
    "drop" "(" <Place> ")"                         => StatementKind::Drop(<>),
}

Rvalue: Rvalue = {
    Operand                                                      => Rvalue::Use(<>),
    <op1:Operand> <bin_op:BinOp> <op2:Operand>                   => Rvalue::BinaryOp(bin_op, op1, op2),
    "Checked" "(" <op1:Operand> <bin_op:BinOp> <op2:Operand> ")" => Rvalue::CheckedBinaryOp(bin_op, op1, op2),
    <un_op:UnOp> <op:Operand>                                    => Rvalue::UnaryOp(un_op, op),
    "&" <p:Place>                                                => Rvalue::Ref(BorrowKind::Shared, p),
    "&" "mut" <p:Place>                                          => Rvalue::Ref(BorrowKind::Mut, p),
}

UnOp: UnOp = {
    "!" => UnOp::Not
}

BinOp: BinOp = {
    "+"  => BinOp::Add,
    "-"  => BinOp::Sub,
    "<"  => BinOp::Lt,
    "<=" => BinOp::Le,
    "==" => BinOp::Eq,
    ">=" => BinOp::Ge,
    ">"  => BinOp::Gt,
}

Operand: Operand = {
    <Constant>     => Operand::Constant(<>),
    <Place>        => Operand::Copy(<>),
    "move" <Place> => Operand::Move(<>),
}

Constant: Constant = {
    "true"    => Constant::Bool(true),
    "false"   => Constant::Bool(false),
    r"[0-9]+" => Constant::Int(u128::from_str(<>).unwrap()),
    "(" ")"   => Constant::Unit
}

TypeLayout: TypeLayout = {
    r"[0-9]+"                   => TypeLayout::Block(usize::from_str(<>).unwrap()),
    "(" <Comma<TypeLayout>> ")" => TypeLayout::Tuple(<>)
}

// -------------------------------------------------------------------------------------------------
// | Types
// -------------------------------------------------------------------------------------------------

OwnRef: Location = "own" "(" <Location> ")" => <>;
Heap: Heap = Comma<Binding<Location, Ty>> => Heap::from_iter(<>);
LocalsMap = Comma<Binding<Local, OwnRef>> ;


Ty: Ty = {
    <BaseTy>                                   => Ty::Refine(<>, Refine::Pred(Pred::tt())),
    "own" "(" <Location> ")"                   => Ty::OwnRef(<>),
    "uninit" "(" <r"[0-9]+"> ")"               => Ty::Uninit(usize::from_str(<>).unwrap()),
    "{" <bty: BaseTy> "|" <refine: Refine> "}" => Ty::Refine(<>),
    "&" <Region> <Location>                    => Ty::Ref(BorrowKind::Shared, <>),
    "&" <Region> "shrd" <Location>             => Ty::Ref(BorrowKind::Shared, <>),
    "&" <Region> "mut" <Location>              => Ty::Ref(BorrowKind::Mut, <>),
    "(" <Sep1<",", Binding<Field, Ty>>> ")"    => Ty::Tuple(<>),
}

BaseTy: BaseTy = {
    "int"   => BaseTy::Int,
    "bool"  => BaseTy::Bool,
    "(" ")" => BaseTy::Unit
}

Refine: Refine = {
   "_"  => Refine::Infer,
   Pred => Refine::Pred(<>)
}

Region: Region = {
   "{" <Comma<Place>> "}" => Region::from(<>),
   "{" "_" "}"            => Region::Infer,
   UniversalRegion        => Region::Universal(<>)
}

Place: Place = {
   PlaceLevel1 => Place { base: <>.0, projs: <>.1 }
}

PlaceLevel1: (Local, Vec<Proj>) = {
    "*" <PlaceLevel1>  => {
        let (local, mut projs) = <>;
        projs.push(Proj::Deref);
        (local, projs)
    },
    PlaceLevel2
}

PlaceLevel2: (Local, Vec<Proj>) = {
    <p: PlaceLevel3> <path: Path> => {
        let (local, mut projs) = p;
        projs.extend(path);
        (local, projs)
    },
}

PlaceLevel3: (Local, Vec<Proj>) = {
    <Local>  => (<>, vec![]),
    "(" <PlaceLevel1> ")"
}

Path: Vec<Proj> = ("." <r"[0-9]+">)* => {
  // TODO: overflow
    <>.iter().map(|s| Proj::Field(usize::from_str(s).unwrap())).collect()
};

// -------------------------------------------------------------------------------------------------
// | Predicates
// -------------------------------------------------------------------------------------------------

Pred      = LeftAssoc<BinOpGroup1, BinaryOp2>;
BinaryOp2 = LeftAssoc<BinOpGroup2, BinaryOp3>;
BinaryOp3 = LeftAssoc<BinOpGroup3, BinaryOp4>;
BinaryOp4 = LeftAssoc<BinOpGroup4, UnaryOp>;

BinOpGroup1: pred::BinOp = {
    "||" => pred::BinOp::Or,
}

BinOpGroup2: pred::BinOp = {
    "&&" => pred::BinOp::And,
};

BinOpGroup3: pred::BinOp = {
    "==" => pred::BinOp::Eq,
    "!=" => pred::BinOp::Neq,
    ">"  => pred::BinOp::Gt,
    "<"  => pred::BinOp::Lt,
    ">=" => pred::BinOp::Ge,
    "<=" => pred::BinOp::Le,
};

BinOpGroup4: pred::BinOp = {
    "+" => pred::BinOp::Add,
    "-" => pred::BinOp::Sub
}


UnaryOp: Pred = {
    <un_op: UnOpP> <op: BasePred> => pred::Pred::UnaryOp(un_op, Box::new(op)),
    BasePred
}

UnOpP: pred::UnOp = {
    "!" => pred::UnOp::Not,
    "-" => pred::UnOp::Neg
}

BasePred: Pred = {
    ConstantP      => Pred::Constant(<>),
    PlaceP         => Pred::Place(<>),
    "(" <Pred> ")" => <>
}

ConstantP: pred::Constant = {
    "true"    => pred::Constant::Bool(true),
    "false"   => pred::Constant::Bool(false),
    // TODO: overflow
    r"[0-9]+" => pred::Constant::Int(u128::from_str(<>).unwrap()),
}

PlaceP: pred::Place = {
    <base: Var> <projs: ProjP*> => pred::Place { <> }
}

ProjP: usize = {
    "." <r"[0-9]+"> => usize::from_str(<>).unwrap()
}

Var: pred::Var = {
    Location => pred::Var::Location(<>),
    Field    => pred::Var::Field(<>),
    "V"      => pred::Var::Nu
}

LeftAssoc<OpGroup, NextExprLevel>: Pred = {
    <lhs: LeftAssoc<OpGroup,NextExprLevel>> <op: OpGroup> <rhs: NextExprLevel>
        => Pred::BinaryOp(op, Box::new(lhs), Box::new(rhs)),
    NextExprLevel,
};

// -------------------------------------------------------------------------------------------------
// | Names
// -------------------------------------------------------------------------------------------------

Local: Local = r"_[0-9]+" => Local::from_usize(usize::from_str(&<>[1..]).unwrap());
Field: Field = r"@[0-9]+" => Field::from_usize(usize::from_str(&<>[1..]).unwrap());
Location: Location = r"l[0-9]+" => Location::from_usize(usize::from_str(&<>[1..]).unwrap());
ContId: ContId = r"k[0-9]+" => ContId::from_usize(usize::from_str(&<>[1..]).unwrap());
FnId: FnId = r"f[0-9]+" => FnId::from_usize(usize::from_str(&<>[1..]).unwrap());
UniversalRegion: UniversalRegion = r"'[0-9]+" => UniversalRegion::from_usize(usize::from_str(&<>[1..]).unwrap());

// -------------------------------------------------------------------------------------------------
// | Misc
// -------------------------------------------------------------------------------------------------

Binding<Name, T> = <Name> ":" <T>;

Sep<S, T>: Vec<T> = {
  <mut v:(<T> S)*> <e:T?> => match e {
      None => v,
      Some(e) => {
          v.push(e);
          v
      }
  }
}

Sep1<S, T>: Vec<T> = {
  <mut v:(<T> S)+> <e:T?> => match e {
      None => v,
      Some(e) => {
          v.push(e);
          v
      }
  }
}

And<T> = Sep<"and", T>;
Comma<T> = Sep<",", T>;