use std::str::FromStr;
use crate::cps_ref::ast::*;
use rustc_span::Symbol;
use crate::cps_ref::context::LiquidRustCtxt;

grammar<'lr>(cx: &'lr LiquidRustCtxt<'lr>);

match {
  r"\s*" => {}, // The default whitespace skipping is disabled if an `ignore pattern` is specified
  r"//[^\n\r]*[\n\r]*" => { },                          // Skip `// comments`
  r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // Skip `/* comments */`
  _,
}

pub Fn: FnDef<'lr> =
 "fn" <name: Symbol>
 "(" <heap: Heap> ";" <args: Args> ")"
 "ret" <ret: Symbol> "(" <out_heap: Heap> ";" <out_ty: OwnRef> ")"
 "=" <body: FnBody> => FnDef { <> };

FnBody: Box<FnBody<'lr>> = {
  "letcont" <def: ContDef> "in" <rest: FnBody>
      => Box::new(FnBody::LetCont{ <> }),

  "if" <discr: Place> "then" <then: FnBody> "else" <else_: FnBody>
    => Box::new(FnBody::Ite{ <> }),

  "call" <func: Place> "(" <args: Comma<Local>> ")" "ret" <ret: Symbol>
    => Box::new(FnBody::Call{ <> }),

  "jump" <target: Symbol> "(" <args: Local*> ")" => Box::new(FnBody::Jump{ <> }),

  <Statement> ";" <FnBody> => Box::new(FnBody::Seq(<>)),

  "abort" => Box::new(FnBody::Abort)
}

ContDef: ContDef<'lr> = {
  <name: Symbol> "(" <heap: Heap> ";" <env: Env> ";" <params: Args> ")" "=" <body: FnBody> =>
    ContDef { <> }
}

Statement: Statement = {
  "let" <Local> "=" "alloc" "(" <TypeLayout> ")" => Statement::Let(<>),
  <Place> ":=" <Rvalue>                          => Statement::Assign(<>),
  "drop" "(" <Local> ")"                         => Statement::Drop(<>),
  "%debug"                                       => Statement::Debug
}

Rvalue: Rvalue = {
  Operand                                   => Rvalue::Use(<>),
  <lhs: Operand> <op: BinOp> <rhs: Operand> => Rvalue::BinaryOp(op, lhs, rhs),
  "&" <p: Place>                            => Rvalue::Ref(BorrowKind::Shared, p),
  "&" "mut" <p: Place>                      => Rvalue::Ref(BorrowKind::Mut, p),
}

Operand: Operand = {
  <Constant> => Operand::Constant(<>),
  <Place>    => Operand::Deref(<>),
}

Constant: Constant = {
  "true"    => Constant::Bool(true),
  "false"   => Constant::Bool(false),
  r"[0-9]+" => Constant::Int(u128::from_str(<>).unwrap()),
  "(" ")"   => Constant::Unit
}

ConstantP: ConstantP = {
  "true"    => ConstantP::Bool(true),
  "false"   => ConstantP::Bool(false),
  r"[0-9]+" => ConstantP::Int(u128::from_str(<>).unwrap())
}

BasicType: BasicType = {
  "int" => BasicType::Int,
  "bool" => BasicType::Bool
}

TypeLayout: TypeLayout = {
  r"[0-9]+"                   => TypeLayout::Block(u32::from_str(<>).unwrap()),
  "(" <Comma<TypeLayout>> ")" => TypeLayout::Tuple(<>)
}

Place: Place = {
  <p: PlaceLevel1> => {
    let (local, projection) = p;
    Place { local, projection }
  }
}

PlaceLevel1: (Local, Vec<Projection>) = {
  "*" <PlaceLevel1>  => {
    let (local, mut proj) = <>;
    proj.push(Projection::Deref);
    (local, proj)
  },
  PlaceLevel2
}

PlaceLevel2: (Local, Vec<Projection>) = {
  <p: PlaceLevel3> <path: Path_> => {
      let (local, mut proj) = p;
      proj.extend(path);
      (local, proj)
  },
}

PlaceLevel3: (Local, Vec<Projection>) = {
  <Local>  => (<>, vec![]),
  "(" <PlaceLevel1> ")"
}

Projection: u32 = "." <r"[0-9]+"> => u32::from_str(<>).unwrap();

Path_: Vec<Projection> = ("." <r"[0-9]+">)* => {
  <>.iter().map(|s| Projection::Field(u32::from_str(s).unwrap())).collect()
};

Ty: Ty<'lr> = {
  "own" "(" <Location> ")"                       => cx.mk_ty(TyS::OwnRef(<>)),
  "{" <ty: BasicType> "|" <pred: PredLevel1> "}" => cx.mk_ty(TyS::Refine { <> }),
  "{" <ty: BasicType> "|" "_" "}"                => cx.mk_refine_hole(<>),
  "&" "(" <Region> "," <Location> ")"            => cx.mk_ty(TyS::Ref(BorrowKind::Shared, <>)),
  "&" "shared" "(" <Region> "," <Location> ")"   => cx.mk_ty(TyS::Ref(BorrowKind::Shared, <>)),
  "&" "mut" "(" <Region> "," <Location> ")"      => cx.mk_ty(TyS::Ref(BorrowKind::Mut, <>)),
  "(" <Comma<Binding<Field, Ty>>> ")"            => cx.mk_ty(TyS::Tuple(<>))
}

Region: Region = {
  "{" <Comma<Place>> "}" => Region::from(<>)
}

OwnRef: OwnRef= "own" "(" <Location> ")" => OwnRef(<>);

PredLevel1 = LeftAssoc<BinOpGroup1, PredLevel2>;

PredLevel2 = LeftAssoc<BinOpGroup2, PredLevel3>;

PredLevel3: Pred<'lr> = {
  ConstantP                            => cx.mk_pred(PredS::Constant(<>)),
  <var: Var> <projection: Projection*> => cx.mk_pred(PredS::Place { <> })
}

Var: Var = {
  Location => Var::Location(<>),
  Field    => Var::Field(<>),
  "V"      => Var::Nu
}

Args = Comma<Binding<Local, OwnRef>>;
Env  = Comma<Binding<Local, OwnRef>>;
Heap = Comma<Binding<Location, Ty>>;

Symbol: Symbol = r"[a-z][a-zA-Z0-9_]*" => Symbol::intern(<>);
Local: Local = Symbol => Local(<>);
Location: Location = Symbol => Location(<>);
Field: Field = r"@[a-zA-Z][a-zA-Z0-9_]*" => Field::intern(&<>[1..]);
Binding<Name, T> = <Name> ":" <T>;

BinOpGroup1: BinOp = {
  "+" => BinOp::Add,
  "-" => BinOp::Sub
}

BinOpGroup2: BinOp = {
  "<"  => BinOp::Lt,
  "<=" => BinOp::Le,
  "==" => BinOp::Eq,
  ">=" => BinOp::Ge,
  ">"  => BinOp::Gt,
};

BinOp = {
  BinOpGroup1, BinOpGroup2
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

LeftAssoc<OpGroup, NextExprLevel>: Pred<'lr> = {
    <lhs: LeftAssoc<OpGroup,NextExprLevel>>
    <op: OpGroup>
    <rhs: NextExprLevel>
      => cx.mk_pred(PredS::BinaryOp(op, lhs, rhs)),
    NextExprLevel,
};